var healthcareSource = 'pragma solidity ^0.4.0; contract Requests { address requestor; string public encrypted_response_data; string public request_hash; uint public reward; address responder; string public public_key; function Requests() { requestor = msg.sender; } /* Creates a request for a document with headers that match the hash. */ function create_request(string requested_data_hash, string public_key) payable { if (!stringsEqual(request_hash, "")) { throw; } request_hash = requested_data_hash; reward = msg.value; public_key = public_key; } /* Attempts to respond to the request. If the hash matches, wait for the the one who requested the information to approve. */ function respond(string request, string encrypted_data) { if (stringsEqual(request_hash, request)) { encrypted_response_data = encrypted_data; responder = msg.sender; } else { throw; } } /* The requestor validates that the response was indeed correct information. Once validated, the one who supplied the information is assigned the reward. */ function validate(string request, bool valid) returns (bool) { if (msg.sender != requestor) { throw; } if (valid) { if (stringsEqual(request_hash, request)) { /* Send reward to responder, self-destruct. */ var amount = reward; reward = 0; if (!responder.send(amount)) { reward = amount; } selfdestruct(requestor); } } else { encrypted_response_data = ""; responder = address(0); } return false; } function stringsEqual(string storage _a, string memory _b) internal returns (bool) { bytes storage a = bytes(_a); bytes memory b = bytes(_b); if (a.length != b.length) return false; for (uint i = 0; i < a.length; i ++) if (a[i] != b[i]) return false; return true; } } '

var healthcareCompiled = eth.compile.solidity(healthcareSource);

var healthcareContract = eth.contract(healthcareCompiled.Requests.info.abiDefinition);


var healthcare = healthcareContract.new({from:eth.accounts[0], data: healthcareCompiled.Requests.code, gas: 3000000}, function(e, contract) { if (!e) { if(!contract.address) {console.log("Contract tx send: Txhash: "+ contract.transactionHash + " waiting to be mined..."); } else {console.log("Contract mined! Address: " + contract.address);console.log(contract);}}})

var pgp_pub_key = "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQENBFhE7P8BCADQB8U4f/vIh9vyh2QDuX+gdLrS9MocLd+jYFzMGPJxddnS9DPE\nh++VuqgVl88QoImYjehtVcFUJgDFANeFT3feAH2CXVobzVF/F1PGE4qvxM4Ud5qx\njUtRRbOV25SwJ6nWBbz00gp3iqPBv4TxKGfTrHy8rikz983hUPBHw8lOLU+ZtRJt\nd9cjNvwWBxeSKtFuVu4W9Wo3MOOcaUzmZQppvz8NT1MdCf405zI40i66+fZ+BUat\nseDlnZNOxRevkQUPBp/3CafH/OcxNCJK51N1lrKvR2VpSF52lsB+4Qc/co0Zwtdl\nBuQd1Q971K7ZayiOprFwm1KZ3Xz0GE0x89VVABEBAAG0InN0ZXZlbiA8c3RldmUu\nbi5jaGVuZzY3QGdtYWlsLmNvbT6JATkEEwEIACMFAlhE7P8CGwMHCwkIBwMCAQYV\nCAIJCgsEFgIDAQIeAQIXgAAKCRBvhd+db8lE/4tWCACkOSxgC+I5eRjwqpsUuZy/\nW1VjvWJEx0CTkwFoAuhPBYMF6UbCaY4mLd6vX7eZ2rB3Fod2iAC8F/TPQ4S8eGQ5\nGjngrcqbx5sa0KDRCaR44Igi0ACrY+JX2z8oxnZdodkkEILm5+keniny9q1a6ii/\n2IKe6WSLSXxB0XqvpPqIpZcJJOo3VgtzY/Jzqvn8iugzXwoQECx7eRCQfT5aFrag\ndxB42mgyw9Rsxa1k48QIJRbXKFLCNjmslJh1q6O8hQ6H7PiTvvPJDg64urzsogi4\n1r1EB/yu0Pm7Vc+lXDzUeODGzUcL5XO+gVsVwLHTKl7woDIP1kyjVqlnE4oFxTWz\nuQENBFhE7P8BCADJKocZso1k62aB8P0gZ3W4Y7BTeWoJ9BiFw6nhVEPfQlp6uJW0\nCII1/tDfv6uRiZDV+vLa+C+7MdKOTIcCacl0r+GI89IJCrQOnm3+zD6lExGGdPMw\n+res3OtDfTGub9nQRPVV75xMOkvqtnHcye5yQJlLsuCxRpg51ng+iOsR4AgmJqRD\n8YOo/0kIoLQ3l9t8ccFEwbunRn5k7gtdLLBdPt/+e+0Q9CMPhlZRh/rj3rvLaRJj\nxum97XQJyr+Cbj3OsWun8XzT90RxYXTDogJdIpoEGXmGlETekdUCU4iWoN+6kvR5\nG55epvPVhilEFZEDwQM0MRmpy1Aiv7TA6g01ABEBAAGJAR8EGAEIAAkFAlhE7P8C\nGwwACgkQb4XfnW/JRP/PMwf/R9lpHN4AC82nQpkPTjXAo04swc7u2pel6kB9jhwC\nOnRE30PiGYPYz3mAsqBPst0r2Ls27jbbWLK35laJIHCuckTCfSxO+cb5QACgjfxa\nca07MUzWQUpGVo+3SVDwQXw/j8m11/MRftPDOsUL8M8w9zBO0vhyyy2lLNF5WFS2\n2cIgcqOgmx1WmoH04HVC5W7RbcAo18MfQz14LybFzQIGf9v878bBWhm9++3LnY/N\nS3mUZyL5h8iVFqlvxoz1GT7vCw15A4yBmhu86e7dstb5/C6T0Kmbs/RC+hIjri7o\nGm8owqDPJUOmyKOBsbla0j9NjY/BDEt9lRBPpkgjiXT3dA==\n=XHPZ\n-----END PGP PUBLIC KEY BLOCK-----"

healthcare.create_request("stevencheng", pgp_pub_key, {from: eth.accounts[0], value: web3.toWei(200, 'ether')});

healthcare.respond.sendTransaction("stevencheng", "mj420", {from: eth.accounts[1]})

healthcare.validate.sendTransaction("stevencheng", true, {from: eth.accounts[0]})